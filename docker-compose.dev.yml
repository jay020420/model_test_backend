# docker-compose.dev.yml (개발용)
version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://sme_user:sme_password@postgres:5432/sme_warning
      - REDIS_URL=redis://redis:6379/0
      - BASE_DIR=/app
      - ENABLE_AUTH=false
    volumes:
      - .:/app  # 코드 핫 리로드를 위해 전체 마운트
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      - postgres
      - redis

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=sme_user
      - POSTGRES_PASSWORD=sme_password
      - POSTGRES_DB=sme_warning
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data

volumes:
  postgres_dev_data:
  redis_dev_data:

---
# nginx.conf
events {
    worker_connections 1024;
}

http {
    upstream api_backend {
        least_conn;
        server api:8000;
    }

    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

    server {
        listen 80;
        server_name your-domain.com;

        # 보안 헤더
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # 요청 크기 제한
        client_max_body_size 10M;

        # Rate Limiting 적용
        location /api/ {
            limit_req zone=api_limit burst=20 nodelay;
            
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 타임아웃 설정
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # 헬스체크는 제한 없음
        location /api/v1/health {
            proxy_pass http://api_backend;
        }

        # 메트릭은 내부 네트워크만
        location /metrics {
            allow 10.0.0.0/8;
            deny all;
            proxy_pass http://api_backend;
        }
    }
}
